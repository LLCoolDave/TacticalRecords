generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Threshold {
  id        Int    @id @default(autoincrement())
  tower     Tower  @relation(fields: [towerId], references: [id])
  towerId   String @unique
  bronze    Int?
  silver    Int?
  gold      Int?
  platinum  Int?
  diamond   Int?
  moon      Int?
  sun       Int?
  overscore Int
}

model Clear {
  id         Int    @id @default(autoincrement())
  tower      Tower  @relation(fields: [towerId], references: [id])
  towerId    String
  level      Int
  difficulty Int?
  volume     Int?
}

model Tower {
  id              String     @id @unique
  fullName        String
  slot            Int        @unique
  chapter         Int
  ingameId        Int?       @unique
  hasMysticGate   Boolean
  hasLastInflator Boolean
  hasNoImpure     Boolean    @default(false)
  thresholds      Threshold?
  clears          Clear[]
  runs            Run[]
}

enum Role {
  USER
  ADMIN
}

model User {
  id           Int     @id @default(autoincrement())
  role         Role    @default(USER)
  authPassword String? @unique
  authDiscord  String? @unique
  authGoogle   String? @unique
  player       Player?

  @@index([authDiscord, authGoogle, authPassword])
}

model Player {
  id        Int     @id
  user      User    @relation(fields: [id], references: [id])
  name      String  @unique
  pfp       String? @db.Text
  sunstones Int     @default(0)
  bronze    Int     @default(0)
  silver    Int     @default(0)
  gold      Int     @default(0)
  platinum  Int     @default(0)
  diamond   Int     @default(0)
  moon      Int     @default(0)
  sun       Int     @default(0)
  runs      Run[]

  @@index([sunstones])
}

model ResourceUse {
  id           Int   @id @default(autoincrement())
  run          Run   @relation(fields: [runId], references: [id])
  runId        Int   @unique
  atk          Int?
  def          Int?
  hp           Int?
  maxHp        Int?
  legacyStones Int?
  sunstones    Int   @default(0)
  legacies     Json?
  bronze       Int?
  silver       Int?
  gold         Int?
  platinum     Int?
  diamond      Int?
  moon         Int?
  sun          Int?

  @@index([sunstones, runId])
}

enum Medal {
  NONE
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  MOON
  SUN
}

model Run {
  id              Int          @id @default(autoincrement())
  player          Player       @relation(fields: [playerId], references: [id])
  playerId        Int
  tower           Tower        @relation(fields: [towerId], references: [id])
  towerId         String
  time            DateTime     @updatedAt
  comment         String?      @db.Text
  screenshot      String?      @db.Text
  score           Int
  pure            Boolean
  impure          Boolean
  mysticGate      Boolean
  lastInflator    Boolean
  isLegacy        Boolean      @default(false)
  hp              Int?
  atk             Int?
  def             Int?
  hpMulti         Int?
  expMulti        Int?
  level           Int?
  clear           Int?
  resourceUse     ResourceUse?
  sunstones       Int
  impureSunstones Int          @default(0)
  medal           Medal

  @@index([playerId, towerId, score, sunstones, medal])
}

model CacheValid {
  id          String   @id
  lastUpdated DateTime @updatedAt
}

model Legacy {
  id          String @id @unique
  fullName    String
  slot        Int    @unique
  costFlat    Int    @default(0)
  costPercent Int    @default(0)
}
